## Project Overview
- Mobile-first application that also works on desktop
- Implemented as a Progressive Web App (PWA)
- Uses Angular 19.2.10 with Angular CLI 19.2.3
- Node.js v22.x required
- Frontend/backend architecture with Vercel for backend deployment
- Uses Supabase for database

## Core UI Features
- Top navbar with logo
- Responsive design with hamburger menu on mobile
- Google Maps as the main content area of the application

## Map Features & Data Display
- Displays public transit lines (e.g., metro lines) on the map.
- Shows individual transit stations as markers.
- Standard station markers, when clicked, show basic information (like station name and serving lines) using default map pop-ups (InfoWindows).
- **"Nearby Points of Interest" (e.g., Steige/Platforms) Functionality:**
    - Fetches and processes data for nearby transit points of interest (conceptually 'Steige' or platforms) based on the user's current location.
    - Instead of directly marking all fetched 'Steige', the system identifies their corresponding *main stations* using a linking ID (e.g., `fk_haltestellen_id`).
    - These main stations are then visually highlighted on the map (e.g., by changing marker color).
    - Uses **custom HTML overlays** to display detailed information next to these highlighted stations.
    - The custom overlays for highlighted stations show key identifiers, including the station's primary ID and a specific 'diva' code/identifier.
    - Ensures that only a single highlight and overlay are shown per unique main station, even if multiple nearby 'Steige' map to it.
    - Manages the lifecycle of these highlights and overlays: clears previous ones before rendering new ones based on updated data, ensuring this happens after new data is fetched.

## Core Functionality
- Uses user's current geolocation
- Displays user location on the map
- Fetches additional data from Vercel backend API

## Technical Implementation
- TypeScript 5.7.2 and RxJS 7.8.0
- Environment configuration using dotenvx for managing API keys
- Custom environment generation script (scripts/generate-env.js)
- Google Maps API integration
- **Custom Map Elements:**
    - Implements custom HTML map overlays by extending `google.maps.OverlayView` for richer content than standard InfoWindows.
    - Uses a **factory pattern** for creating these custom overlay classes. This is crucial to correctly manage the dependency on the Google Maps API, ensuring it's loaded before the overlay class (which extends a Maps API class) is defined.
- **Shared Data Structures:**
    - Employs shared TypeScript type definitions for data structures exchanged between the frontend and backend (e.g., for station and 'Steig' data, located in `src/app/shared-types/api-models.ts` and `api/types/api-models.ts`) to maintain consistency.

## Backend API Details (Vercel Serverless Functions)
- **Data Sources**: Supabase (direct queries and RPCs), static `lineStops.json` file, external Wiener Linien OGD API, Google Distance Matrix API.
- **Caching**: Upstash Redis is used extensively for caching API responses, session data, and managing distributed locks/queues for real-time data fetching.
- **Key Endpoints**:
    - `api/getLineStops.ts`: Serves detailed line and stop data from `lineStops.json`, filterable by `linien_id`.
    - `api/getLines.ts`: Fetches metro line metadata from Supabase `linien` table.
    - `api/getStops.ts`: Fetches station (Haltestellen) data from Supabase, supporting queries by line ID, specific station IDs, or all metro stations. Converts WKB to GeoJSON.
    - `api/getSteige.ts`: Fetches individual platforms/points (Steige) for a given main station ID from Supabase. Converts WKB to GeoJSON.
    - `api/getNearbySteige.ts`: Calls Supabase RPC `get_nearby_steige` based on lat/lon/radius, then filters results against allowed `linien_ids` from `lineStops.json`.
    - `api/getRealTimeData.ts`: Simple proxy to Wiener Linien OGD monitor API for a single RBL.
    - `api/getWienerLinienMonitor.ts`: Fetches and processes real-time monitor data for multiple DIVA numbers from Wiener Linien OGD API. Filters for U-Bahn lines (U1, U2, U3, U4, U6), limits departures per line to 3, and aggregates data for monitors belonging to the same physical station.
    - `api/routes/monitor.ts`: Advanced, Redis-backed endpoint for real-time monitor data. Implements request batching, throttling, distributed locking, and caching of individual monitor data to efficiently manage calls to the Wiener Linien API. This is the primary endpoint for client-side real-time updates.
    - `api/session/init.ts`: Initializes a secure session. Generates a `sessionId` (sent as HttpOnly cookie) and a `sessionSigningKey` (stored in Redis, returned to client) for signing secure requests.
    - `api/routes/walking-matrix.ts`: Securely calculates walking times using Google Distance Matrix API. Validates requests via HMAC-SHA256 signature (using `sessionSigningKey` from Redis) and timestamp. Uses a server-side Google API key.

## Security Approach
- API keys stored in encrypted .env files using dotenvx
- Different keys for development, staging, and production
- Environment variables accessed via dotenvx.get() method
- Generated environment.ts is git-ignored
- Secure backend endpoints (e.g., walking matrix) use session-based HMAC-SHA256 request signing.

## Deployment
- Uses Vercel for deployment
- Environment-specific configuration

## Code Comments
- Write comments in English generally across the project
- Write comments in German if the file already contains other German comments (e.g., `api/getStops.ts`).

## Recent Architectural Changes (Walking Time Feature - May 2025)

### Secure Backend API for Walking Times
- **Google Distance Matrix API Call Moved to Backend:**
    - The calculation of walking durations from the user's location to nearby stations is now handled by a Vercel serverless function: `/api/routes/walking-matrix.ts`.
    - This function uses a dedicated, server-side Google API key (`GOOGLE_MAPS_SERVER_API_KEY`), enhancing security by not exposing this key on the client.
- **HMAC-Secured Endpoint:**
    - The `/api/routes/walking-matrix.ts` endpoint is protected using session-based HMAC-SHA256 request signing.

### Client-Side Integration for Secure API Calls
- **`SessionService` (New - `src/app/core/services/session.service.ts`):**
    - Manages the client-side part of the session: calls `/api/session/init` to obtain and store the `sessionSigningKey` in memory.
    - Provides `ensureSessionSigningKey()` to components/services needing to make signed requests.
- **`ApiService` (`src/app/core/services/api.service.ts`):**
    - Added `getSecureWalkingMatrix(payload)` method.
    - This method uses `SessionService` to get the `sessionSigningKey`.
    - It constructs the message to sign (timestamp + payload) and generates an HMAC-SHA256 signature using `crypto-js`.
    - Sends a POST request to the secure `/api/routes/walking-matrix` backend endpoint with the payload and signature headers.
- **`GoogleMapsService` (`src/app/core/services/google-maps.service.ts`):**
    - Updated to load the Google Maps `geometry` library, enabling client-side distance calculations (used for the user movement detection feature).
- **`MapViewComponent` (`src/app/features/map/components/map-view/map-view.component.ts`):**
    - The `fetchAndStoreWalkingTimes` method now calls `apiService.getSecureWalkingMatrix()` for walking time data.
    - Implements periodic updates for walking times:
        - Fetched when the set of monitored stations changes.
        - Fetched if the user has moved more than 50 meters since the last calculation for the current set of stations.
    - `lastWalkingTimeUpdateLocation` property tracks the user's location at the time of the last successful walking time API call.
    - Walking duration is displayed in overlays as `X'` (e.g., "10'") next to the station name, including a "directions_walk" icon.
    - Status message in overlays updated to "No departure data found!" when specific monitor data is missing.

### `vercel.json` Configuration
- Updated `rewrites` to improve routing for API calls and SPA fallback, particularly for the `vercel dev` environment. The current configuration aims to map API paths like `/api/some/path` to `/api/some/path.ts` if no extension is present, and includes a robust SPA fallback that excludes common static asset and API paths. (Note: Local `vercel dev` routing behavior for API functions remains an area of ongoing troubleshooting).

## Supabase Auth & Profile Integration (June 2025)

### User Authentication Flow
- **Signup:** Users can sign up with email and password.
    - Email confirmation is required. UI notifies users to check their email for an activation link.
    - Signup form is hidden post-successful registration attempt to guide users to email verification.
- **Login:** Users can log in with confirmed credentials.
- **Logout:** Users can log out, clearing their session.
- **Session Management:** AuthService manages user sessions and authentication state using `@supabase/supabase-js`.
    - `NavigatorLockAcquireTimeoutError` resolved by disabling `autoRefreshToken` and ensuring `@supabase/supabase-js` v2.70.0 is installed.
    - Circular dependency between AuthService and ProfileService resolved using Angular's `Injector`.

### User Profile Management
- **`profiles` Table:** A Supabase table `public.profiles` stores user-specific data:
    - id (UUID, foreign key to `auth.users.id`, primary key)
    - username (TEXT, unique, chosen by user)
    - email (TEXT, sourced from `auth.users.email`)
- **`handle_new_user` Trigger:** A PostgreSQL trigger function automatically creates a new row in `public.profiles` when a new user signs up in `auth.users`. This trigger populates id, email, and an initial username (if provided in `raw_user_meta_data`, otherwise null).
- **ProfileService:** An Angular service handles:
    - Fetching the current user's profile from the `profiles` table.
    - Updating the user's username.
- **UI Integration:**
    - **Profile Management Page:** Allows users to view their email and set/update their username.
    - **Navbar Display:** After login, the navbar displays the user's username (from ProfileService). If no username is set, it falls back to the user's email.

### Key Dependencies & Configuration
- `@supabase/supabase-js`: v2.70.0
- Angular Services: AuthService, ProfileService for managing auth state and profile data.
- Supabase RLS: Row Level Security policies are in place for `profiles` and `user_favorite_stations` tables to ensure users can only access/modify their own data.